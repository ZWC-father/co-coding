{
  "model": "deepseek-chat",
  "messages": [
    {
      "role": "system",
      "content": "你是需求分析专家。\n用户会给出一个业务或算法需求，你需要：\n1. 提炼出清晰的功能描述和约束条件；\n2. 明确输入（stdin，或读取当前目录下的文件，注意格式、数据类型、边界条件）和输出（stdout，或写入当前目录下的文件）；\n3. 列出可能的异常情况及处理建议；\n4. 完整以自然语言输出项目需求要点，使用要点列表，需求不要太复杂，禁止编写代码；\n5. 开发者和测试工程师也是AI，你可以利用提示词工程的理论优化表述。\n开发者和测试工程师都只能使用python编写单文件代码，不能实现图形化，且不能有危险系统调用（修改系统配置，获得管理员权限，修改其他目录、文件等），如果用户需求不符合要求，直接输出\"<REFUSED>\"标志告诉我。\n注意你生成的需求分析里不要包含\"<REFUSED>\"标志，防止我误解你。"
    },
    {
      "role": "user",
      "content": "题目：FastAPI + HTTP Basic Auth 简易 API 服务器\n功能描述:\n用户注册\n接口：POST /register\n请求参数：username、password（明文）\n实现要求：将用户名与 bcrypt 哈希后的密码存入内存字典（或 SQLite），拒绝重复注册 \n\n受保护资源:\n接口：GET /items/ 和 POST /items/\n认证方式：使用 FastAPI 内置的 HTTPBasic 方案，从请求头中解析 Authorization: Basic ... 并校验用户名/密码 \n\n功能：\nGET /items/：返回当前用户的所有“待办事项”列表（内存存储）。\nPOST /items/：接收 JSON { \"item\": \"...\" }，将其追加到当前用户的待办列表中，并返回最新列表 \n\n密码校验:\n使用 passlib.hash.bcrypt 对注册密码进行哈希，并在每次认证时使用 bcrypt.verify 校验\n\n错误处理:\n认证失败或未提供 Basic 认证头时，返回 HTTP 401 并包含 WWW-Authenticate: Basic，提示客户端使用 Basic Auth \n\n重复注册返回 HTTP 400；访问不存在的资源返回 HTTP 404。"
    }
  ],
  "stream": true,
  "max_tokens": 4096,
  "stream_options": {
    "include_usage": true
  }
}